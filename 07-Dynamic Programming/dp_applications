#Dynamic Programming applications to a variety of example problems

#largest increasing subsequence
A = [6,2,5,1,7,4,8,3]

def sub_solve(arr):
	length = {}
	for k in range(len(arr)):
		length[k] = 1;
		for i in range(k):
			if arr[i] < arr[k]:
				length[k] = max(length[k], length[i]+1)
	return max(length.values())

print(sub_solve(A))

#==================================================
#Path in a grid with max sum
# the original solution from the text did not work
# as it skipped the sums in the first row and column
# of the grid, since the x,y loops started from 1
# the solution below is a correction

grid = [[3,7,8,2,7],[9,8,3,5,5],[1,7,9,8,5],[3,8,6,4,10],[6,3,9,7,8]]

def max_sum(A):
	tot = A.copy()
	for y in range(0,len(A)):
		for x in range(0,len(A[0])):
			if x==0 and y==0:
				continue
			elif x == 0:
				tot[y][x] += tot[y-1][x]
			elif y == 0:
				tot[y][x] += tot[y][x-1]
			else:
				tot[y][x] += max(tot[y][x-1],tot[y-1][x])
	return tot[-1][-1]

print(max_sum(grid))

#================================================
#Knapsack problem

def w_sum(weights):
	possible = {i:0 for i in range(sum(weights))}
	possible[0] = 1
	for k in weights:
		for x in range(sum(weights))[::-1]:
			if possible[x]: possible[x+k] = 1
	return possible
	
weights = [1,3,3,5]
print(w_sum(weights))

#================================================
#edit distance
# bonus, since this code is not in the book

def d_solve(w1, w2):
	dist = [[math.inf for _ in range(len(w1))] for _ in range(len(w2))]
	dist[0][0] = 0
	for x in range(len(w1)):
		for y in range(len(w2)):
			if x == 0 and y == 0:
				continue
			elif x == 0:
				dist[y][x] = dist[y-1][x] + 1
			elif y == 0:
				dist[y][x] = dist[y][x-1] + 1
			else:
				dist[y][x] = min(dist[y][x-1] + 1, dist[y-1][x] + 1, dist[y-1][x-1] + (w1[x] == w2[y]))
	return dist[-1][-1]

word1 = 'movie'
word2 = 'love'
print(d_solve(word1,word2))
